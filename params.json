{"google":"","tagline":"The Rails integration for the AuthN authentication library","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"AuthN Rails is an extention of the AuthN library to give easy integration into Rails framework.\r\n\r\n\r\nUsing AuthN Rails\r\n=================\r\n\r\nTo start using authn you simply need to install and hook up to your existing \"user\" model:\r\n\r\n``` ruby\r\n# create_table :accounts do |t|\r\n#   t.string :email\r\n#   t.binary :password_digest\r\n#\r\n#   t.timestamps\r\n# end\r\n# add_index :accounts, :email\r\n#\r\n\r\nclass Account < ActiveRecord::Base\r\n  include AuthN::Model\r\n\r\n  has_authentication\r\n  has_secure_password\r\n\r\n  validates :email, uniqueness: true, presence: true, length: 5..255\r\n  validates :password, length: 10..1024\r\n\r\n  attr_accessible :email\r\nend\r\n```\r\n\r\nSee?\r\nNo muss, no fuss.\r\nNow what about all those addons?\r\nWe'll you can see their own pages, but here's a taste:\r\n\r\n``` ruby\r\n# create_table :accounts do |t|\r\n#   t.string :email\r\n#   t.binary :password_digest\r\n#\r\n#   t.string :activation_token\r\n#   t.boolean :activation_state, default: false\r\n#   t.datetime :activation_expires_at\r\n#\r\n#   t.string :password_recovery_token\r\n#   t.datetime :password_recovery_expires_at\r\n#\r\n#   t.string :login_protection_token\r\n#   t.datetime :login_protection_expires_at\r\n#   t.integer :login_protection_attempts, default: 0\r\n#\r\n#   t.timestamps\r\n# end\r\n# add_index :accounts, :email\r\n# add_index :accounts, :activation_token\r\n# add_index :accounts, :activation_state\r\n# add_index :accounts, :password_recovery_token\r\n# add_index :accounts, :login_protection_token\r\n#\r\n\r\nclass Account < ActiveRecord::Base\r\n  include AuthN::Model\r\n\r\n  has_authentication\r\n  has_password_recovery mailer: \"PasswordRecoveryMailer\"\r\n  has_activation mailer: \"ActivationMailer\", on_create: false\r\n  has_login_protection maximum: 3, redirect: { controller: :accounts, action: :maximum_login_failure }\r\n  has_secure_password\r\n\r\n  validates :email, uniqueness: true, presence: true, length: 5..255\r\n  validates :password, length: 10..1024\r\n\r\n  attr_accessible :email\r\nend\r\n```\r\n\r\nYou'll notice that there are options after some of the add-on singleton methods.\r\nThese are used to overwrite the global configuration.\r\nauthn assumes quite a few things, but never stops you from changing how it works.\r\nAs above you can change how each of your \"user\" models functions (for say admin recovery emails vs support recovery emails).\r\nYou can programatically write the \"global\" configuration by editing the `config/initializers/authn.rb` file.\r\n\r\n\r\nInstalling AuthN Rails\r\n======================\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'authn-rails'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install authn-rails\r\n\r\nYou're all setup and can follow the examples above.\r\nHowever if you want to fine tune your AuthN install simply run this generator:\r\n\r\n    $ rails generate authen:config\r\n\r\nIf you want to use a model for users other than the default \"Account\":\r\n\r\n    $ rails generate authen:config --model SomeUserModel\r\n\r\n\r\nContributing\r\n============\r\n\r\n  1. Fork it\r\n  2. Create your feature branch (`git checkout -b my-new-feature`)\r\n  3. Commit your changes (`git commit -am 'Add some feature'`)\r\n  4. Push to the branch (`git push origin my-new-feature`)\r\n  5. Create new Pull Request\r\n\r\n\r\nLicense\r\n=======\r\n\r\n    Copyright (c) 2012 Kurtis Rainbolt-Greene\r\n\r\n    MIT License\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining\r\n    a copy of this software and associated documentation files (the\r\n    \"Software\"), to deal in the Software without restriction, including\r\n    without limitation the rights to use, copy, modify, merge, publish,\r\n    distribute, sublicense, and/or sell copies of the Software, and to\r\n    permit persons to whom the Software is furnished to do so, subject to\r\n    the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be\r\n    included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","name":"AuthN Rails"}